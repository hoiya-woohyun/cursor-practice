---
description: "검증 규칙 - 코드 검증 모드 동작 규칙 및 체크리스트"
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: true
---

# 🔍 검증 규칙

## 🎯 검증 모드 동작 규칙

### 검증 모드 활성화 방법

커서에게 다음과 같이 요청하세요:
**"검증 모드를 실행해주세요"**

## 📋 검증 항목 체크리스트

### 1. 배열 변수명 규칙 검증

- [ ] 배열 변수명이 'List'로 끝나는가?
- [ ] 'xxx', 'temp', 'data' 같은 의미없는 변수명을 사용하지 않았는가?
- [ ] 변수명이 코드의 의도를 명확히 표현하는가?

### 2. 로직 패턴 검증

- [ ] if-else 문을 사용했는가?
- [ ] filter 메서드를 사용하지 않았는가?
- [ ] for loop를 사용했는가?

### 3. 코드 품질 검증

- [ ] 조건문 문법이 올바른가?
- [ ] 배열 접근이 안전한가?
- [ ] 코드가 읽기 쉬운가?

## 🎯 검증 결과 예시

### ❌ 잘못된 코드

```javascript
const xxx = numbers.filter((num) => num % 2 === 0);
```

### ✅ 올바른 코드

```javascript
const evenNumbersList = [];
for (let i = 0; i < numbers.length; i++) {
  if (numbers[i] % 2 === 0) {
    evenNumbersList.push(numbers[i]);
  }
}
```

## 💡 검증 모드 사용법

1. 코드 작성 완료 후
2. "검증 모드를 실행해주세요" 요청
3. 커서가 체크리스트에 따라 검증
4. 문제점 지적 및 개선 제안
5. 수정 후 재검증

## 🔍 커서가 물어볼 질문들

1. "배열 변수명이 'List'로 끝나지 않았습니다. 수정해주세요."
2. "filter 메서드 대신 if-else 문을 사용해야 합니다."
3. "'xxx'는 적절한 변수명이 아닙니다. 의미있는 이름으로 바꿔주세요."
4. "변수명이 코드의 의도를 명확히 표현하지 못합니다."

## 🤖 커서 답변 규칙

### 📋 답변 마지막에 요약점 추가 규칙

커서는 모든 답변의 마지막에 다음 형식으로 요약점을 제공해야 합니다:

```
## 📊 요약점

### ✅ 완료된 작업
- [작업 1]
- [작업 2]
- [작업 3]

### 🔍 발견된 문제점
- [문제점 1]
- [문제점 2]

### 📝 수정 사항
- [수정사항 1]
- [수정사항 2]

### 🎯 다음 단계
- [다음에 해야 할 일]
```

### 📌 요약점 작성 가이드라인

1. **완료된 작업**: 실제로 수행한 작업들을 구체적으로 나열
2. **발견된 문제점**: 코드 검토 중 발견한 규칙 위반이나 문제점
3. **수정 사항**: 실제로 수정한 내용들
4. **다음 단계**: 사용자가 다음에 해야 할 일이나 추가 검토가 필요한 부분
